/*
 * HomeReducer
 *
 * The reducer takes care of our data. Using actions, we can
 * update our application state. To add a new action,
 * add it to the switch statement in the reducer function
 *
 */

import produce from 'immer';
import { START_SIMULATION, STOP_SIMULATION, UPDATE_CURRENT_STYLE } from './constants';

const targetString = "hello world good old genetic algorithms amirite guys?";
// const targetString = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam dictum nisi dapibus ipsum placerat sagittis non scelerisque est. Vestibulum quis congue ante, ac dignissim ante. In tristique urna massa, id tristique massa auctor ut. Nulla mattis magna eget lorem consequat, ut viverra neque tincidunt.";

// The initial state of the App
export const initialState = {
  targetString: targetString,
  currentString: targetString,
  isSimulationRunning: false,

  // ui style generated by genetic algo
  style: {
    contentMargins: 10, // px
    borderThickness: 1, // px
    justifyItems: 'start' // start, center, end, stretch
  },
  individual: 0,
};

/* eslint-disable default-case, no-param-reassign */
const homeReducer = (state = initialState, action) =>
  produce(state, draft => {
    switch (action.type) {
      case START_SIMULATION:
        draft.isSimulationRunning = true;
        break;
      case STOP_SIMULATION:
        draft.isSimulationRunning = false;
        break;
      case UPDATE_CURRENT_STYLE:
        draft.style = action.style;
        draft.individual = action.individual;
        break;
    }
  });

export default homeReducer;
